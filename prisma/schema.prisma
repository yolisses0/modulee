// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  output          = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String           @unique @db.VarChar(320)
  username        String           @unique @db.VarChar(30)
  name            String           @db.VarChar(70)
  bio             String?          @db.VarChar(150)
  isGuest         Boolean
  isSeeded        Boolean?
  externalModules ExternalModule[]
  likes           Like[]
  Project         Project[]
}

model Project {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String     @db.VarChar(100)
  graph       Json
  description String?    @db.VarChar(1000)
  moduleType  ModuleType
  userId      String
  user        User       @relation(fields: [userId], references: [id])
}

model ExternalModule {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isSeeded    Boolean?
  name        String     @db.VarChar(100)
  graph       Json
  likeCount   Int        @default(0)
  projectId   String     @db.VarChar(22)
  description String?    @db.VarChar(1000)
  moduleType  ModuleType
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  likes       Like[]
}

enum ModuleType {
  effect
  utility
  instrument
}

model Like {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  externalModuleId String
  externalModule   ExternalModule @relation(fields: [externalModuleId], references: [id], onDelete: Cascade)

  @@unique([userId, externalModuleId])
}
